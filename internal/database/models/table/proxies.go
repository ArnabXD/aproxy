//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Proxies = newProxiesTable("", "proxies", "")

type proxiesTable struct {
	sqlite.Table

	// Columns
	ID             sqlite.ColumnInteger
	Host           sqlite.ColumnString
	Port           sqlite.ColumnInteger
	ProxyType      sqlite.ColumnString
	Country        sqlite.ColumnString
	Anonymity      sqlite.ColumnString
	HTTPS          sqlite.ColumnBool
	Status         sqlite.ColumnString
	ResponseTimeMs sqlite.ColumnInteger
	FailCount      sqlite.ColumnInteger
	FirstSeenAt    sqlite.ColumnTimestamp
	LastCheckedAt  sqlite.ColumnTimestamp
	LastHealthyAt  sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type ProxiesTable struct {
	proxiesTable

	EXCLUDED proxiesTable
}

// AS creates new ProxiesTable with assigned alias
func (a ProxiesTable) AS(alias string) *ProxiesTable {
	return newProxiesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProxiesTable with assigned schema name
func (a ProxiesTable) FromSchema(schemaName string) *ProxiesTable {
	return newProxiesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProxiesTable with assigned table prefix
func (a ProxiesTable) WithPrefix(prefix string) *ProxiesTable {
	return newProxiesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProxiesTable with assigned table suffix
func (a ProxiesTable) WithSuffix(suffix string) *ProxiesTable {
	return newProxiesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProxiesTable(schemaName, tableName, alias string) *ProxiesTable {
	return &ProxiesTable{
		proxiesTable: newProxiesTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newProxiesTableImpl("", "excluded", ""),
	}
}

func newProxiesTableImpl(schemaName, tableName, alias string) proxiesTable {
	var (
		IDColumn             = sqlite.IntegerColumn("id")
		HostColumn           = sqlite.StringColumn("host")
		PortColumn           = sqlite.IntegerColumn("port")
		ProxyTypeColumn      = sqlite.StringColumn("proxy_type")
		CountryColumn        = sqlite.StringColumn("country")
		AnonymityColumn      = sqlite.StringColumn("anonymity")
		HTTPSColumn          = sqlite.BoolColumn("https")
		StatusColumn         = sqlite.StringColumn("status")
		ResponseTimeMsColumn = sqlite.IntegerColumn("response_time_ms")
		FailCountColumn      = sqlite.IntegerColumn("fail_count")
		FirstSeenAtColumn    = sqlite.TimestampColumn("first_seen_at")
		LastCheckedAtColumn  = sqlite.TimestampColumn("last_checked_at")
		LastHealthyAtColumn  = sqlite.TimestampColumn("last_healthy_at")
		allColumns           = sqlite.ColumnList{IDColumn, HostColumn, PortColumn, ProxyTypeColumn, CountryColumn, AnonymityColumn, HTTPSColumn, StatusColumn, ResponseTimeMsColumn, FailCountColumn, FirstSeenAtColumn, LastCheckedAtColumn, LastHealthyAtColumn}
		mutableColumns       = sqlite.ColumnList{HostColumn, PortColumn, ProxyTypeColumn, CountryColumn, AnonymityColumn, HTTPSColumn, StatusColumn, ResponseTimeMsColumn, FailCountColumn, FirstSeenAtColumn, LastCheckedAtColumn, LastHealthyAtColumn}
		defaultColumns       = sqlite.ColumnList{HTTPSColumn, StatusColumn, FailCountColumn, FirstSeenAtColumn}
	)

	return proxiesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		Host:           HostColumn,
		Port:           PortColumn,
		ProxyType:      ProxyTypeColumn,
		Country:        CountryColumn,
		Anonymity:      AnonymityColumn,
		HTTPS:          HTTPSColumn,
		Status:         StatusColumn,
		ResponseTimeMs: ResponseTimeMsColumn,
		FailCount:      FailCountColumn,
		FirstSeenAt:    FirstSeenAtColumn,
		LastCheckedAt:  LastCheckedAtColumn,
		LastHealthyAt:  LastHealthyAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
