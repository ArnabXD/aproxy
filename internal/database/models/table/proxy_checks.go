//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var ProxyChecks = newProxyChecksTable("", "proxy_checks", "")

type proxyChecksTable struct {
	sqlite.Table

	// Columns
	ID             sqlite.ColumnInteger
	ProxyID        sqlite.ColumnInteger
	Status         sqlite.ColumnString
	ResponseTimeMs sqlite.ColumnInteger
	ErrorMessage   sqlite.ColumnString
	CheckedAt      sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type ProxyChecksTable struct {
	proxyChecksTable

	EXCLUDED proxyChecksTable
}

// AS creates new ProxyChecksTable with assigned alias
func (a ProxyChecksTable) AS(alias string) *ProxyChecksTable {
	return newProxyChecksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProxyChecksTable with assigned schema name
func (a ProxyChecksTable) FromSchema(schemaName string) *ProxyChecksTable {
	return newProxyChecksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProxyChecksTable with assigned table prefix
func (a ProxyChecksTable) WithPrefix(prefix string) *ProxyChecksTable {
	return newProxyChecksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProxyChecksTable with assigned table suffix
func (a ProxyChecksTable) WithSuffix(suffix string) *ProxyChecksTable {
	return newProxyChecksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProxyChecksTable(schemaName, tableName, alias string) *ProxyChecksTable {
	return &ProxyChecksTable{
		proxyChecksTable: newProxyChecksTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newProxyChecksTableImpl("", "excluded", ""),
	}
}

func newProxyChecksTableImpl(schemaName, tableName, alias string) proxyChecksTable {
	var (
		IDColumn             = sqlite.IntegerColumn("id")
		ProxyIDColumn        = sqlite.IntegerColumn("proxy_id")
		StatusColumn         = sqlite.StringColumn("status")
		ResponseTimeMsColumn = sqlite.IntegerColumn("response_time_ms")
		ErrorMessageColumn   = sqlite.StringColumn("error_message")
		CheckedAtColumn      = sqlite.TimestampColumn("checked_at")
		allColumns           = sqlite.ColumnList{IDColumn, ProxyIDColumn, StatusColumn, ResponseTimeMsColumn, ErrorMessageColumn, CheckedAtColumn}
		mutableColumns       = sqlite.ColumnList{ProxyIDColumn, StatusColumn, ResponseTimeMsColumn, ErrorMessageColumn, CheckedAtColumn}
		defaultColumns       = sqlite.ColumnList{CheckedAtColumn}
	)

	return proxyChecksTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		ProxyID:        ProxyIDColumn,
		Status:         StatusColumn,
		ResponseTimeMs: ResponseTimeMsColumn,
		ErrorMessage:   ErrorMessageColumn,
		CheckedAt:      CheckedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
